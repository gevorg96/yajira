// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using YetAnotherJira.Infrastructure;

#nullable disable

namespace YetAnotherJira.Infrastructure.Migrations
{
    [DbContext(typeof(TicketDbContext))]
    [Migration("20250910214401_InitialCreateFixed")]
    partial class InitialCreateFixed
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("YetAnotherJira.Application.DAL.TicketDal", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Assignee")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("assignee");

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("author");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)")
                        .HasColumnName("description");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<long?>("ParentTaskId")
                        .HasColumnType("bigint")
                        .HasColumnName("parent_task_id");

                    b.Property<int>("Priority")
                        .HasColumnType("integer")
                        .HasColumnName("priority");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("title");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_tickets");

                    b.HasIndex("ParentTaskId")
                        .HasDatabaseName("ix_tickets_parent_task_id");

                    b.ToTable("tickets", (string)null);
                });

            modelBuilder.Entity("YetAnotherJira.Application.DAL.TicketRelationDal", b =>
                {
                    b.Property<long>("FromTaskId")
                        .HasColumnType("bigint")
                        .HasColumnName("from_task_id");

                    b.Property<long>("ToTaskId")
                        .HasColumnType("bigint")
                        .HasColumnName("to_task_id");

                    b.Property<int>("RelationType")
                        .HasColumnType("integer")
                        .HasColumnName("relation_type");

                    b.HasKey("FromTaskId", "ToTaskId", "RelationType")
                        .HasName("pk_ticket_relations");

                    b.HasIndex("FromTaskId")
                        .HasDatabaseName("ix_ticket_relations_from_task_id");

                    b.HasIndex("ToTaskId")
                        .HasDatabaseName("ix_ticket_relations_to_task_id");

                    b.ToTable("ticket_relations", null, t =>
                        {
                            t.HasCheckConstraint("CK_TaskRelation_NoSelfReference", "from_task_id != to_task_id");
                        });
                });

            modelBuilder.Entity("YetAnotherJira.Application.DAL.UserDal", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("email");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("password_hash");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("username");

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("YetAnotherJira.Application.DAL.TicketDal", b =>
                {
                    b.HasOne("YetAnotherJira.Application.DAL.TicketDal", "ParentTask")
                        .WithMany("SubTasks")
                        .HasForeignKey("ParentTaskId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_tickets_tickets_parent_task_id");

                    b.Navigation("ParentTask");
                });

            modelBuilder.Entity("YetAnotherJira.Application.DAL.TicketRelationDal", b =>
                {
                    b.HasOne("YetAnotherJira.Application.DAL.TicketDal", "FromTask")
                        .WithMany("OutgoingRelations")
                        .HasForeignKey("FromTaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_ticket_relations_tickets_from_task_id");

                    b.HasOne("YetAnotherJira.Application.DAL.TicketDal", "ToTask")
                        .WithMany("IncomingRelations")
                        .HasForeignKey("ToTaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_ticket_relations_tickets_to_task_id");

                    b.Navigation("FromTask");

                    b.Navigation("ToTask");
                });

            modelBuilder.Entity("YetAnotherJira.Application.DAL.TicketDal", b =>
                {
                    b.Navigation("IncomingRelations");

                    b.Navigation("OutgoingRelations");

                    b.Navigation("SubTasks");
                });
#pragma warning restore 612, 618
        }
    }
}
